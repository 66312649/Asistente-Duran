name: Build data (Excel → CSV por centro)

on:
  workflow_dispatch:
  schedule:
    - cron: "25 5 * * *"  # diario 07:25 CET aprox (GitHub corre en UTC)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Mostrar árbol (top)
        run: |
          ls -la
          echo
          ls -la imports || true

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl xlrd pyxlsb chardet

      # Diagnóstico útil: tipo, tamaño y cabecera binaria
      - name: Meta de ficheros (tipo y tamaño)
        run: |
          for f in \
            "imports/Base articulos precio.xlsx" \
            "imports/Importacion Stock.xlsx" \
            "imports/Lista proveedores_05092025.xlsx"
          do
            echo ">>> $f"
            ls -lh "$f" || true
            file -b "$f" || true
            echo "Primeros 64 bytes (hex):"
            xxd -l 64 -p "$f" || true
            echo
          done

      # Inspección rápida: intenta detectar si son ZIP reales de XLSX
      - name: Inspección rápida de los Excel (detectar formato real)
        run: |
          python - << 'PY'
          import zipfile, sys, os
          paths = [
            "imports/Base articulos precio.xlsx",
            "imports/Importacion Stock.xlsx",
            "imports/Lista proveedores_05092025.xlsx",
          ]
          for p in paths:
            print("==>", p)
            if not os.path.exists(p):
              print("  (no existe)")
              continue
            try:
              with zipfile.ZipFile(p) as z:
                print("  XLSX válido (ZIP). Miembros:", len(z.infolist()))
            except Exception as e:
              print("  No es XLSX ZIP:", e)
          PY

      - name: Ejecutar ingesta (con logs verbosos)
        run: |
          python scripts/build_data.py --verbose

      - name: Comprobar cambios generados
        id: git_status
        run: |
          git status --porcelain
          echo "changed=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT

      - name: Commit & push datos (si hubo cambios)
        if: steps.git_status.outputs.changed != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "build: actualizar CSV por centro (auto)"
          git push
